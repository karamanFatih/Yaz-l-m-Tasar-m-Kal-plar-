package objectpoolpattern;

import java.util.ArrayList;
import java.util.List;

class ObjectPool {

    public static List objects = new ArrayList();
    private static ObjectPool objectpool;

    static {
        objects.add("Garaj 1");
        objects.add("Garaj 2");
    }

    private ObjectPool() {        // private constructure ( Constructor private olmalý. Bu yapýlan iþlem new ile nesne oluþturulmasýný engeller. )
    }

    public static  ObjectPool getObjectpool() { //Instance’larý new ile yaratmýyoruz. Bunun yerine getInstance metodunu kullanýyoruz. Bu metot ise bize her defasýnda ayný instance’ý veriyor.

        if (objectpool == null) { //1. kýsým  
            // 1. kýsýmdaki synchronized keyword’u ile 2. kýsýmda iþaretlenmiþ olan kýsýmý kilitler.Artýk bir baþka thread bu kýsma giremez.
            synchronized (ObjectPool.class) { //2. kýsým 

                if (objectpool == null) {
                    objectpool = new ObjectPool();
                }
            }
        }

        return objectpool;
    }

    public static Object getObject() {
        synchronized (objects) {
            if (objects.isEmpty()) {
                System.out.println(Thread.currentThread().getName() + " Garajin boþalmasini bekliyor");
                try {
                    objects.wait();
                    System.out.println(Thread.currentThread().getName() + " Sirada bekliyor");
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            Object locked = objects.get(objects.size() - 1);
            objects.remove(locked);
            System.out.println(Thread.currentThread().getName() + " " + locked + " ' e park etti");
            return locked;
        }
    }

    public boolean release(Object released) {
        synchronized (objects) {
            System.out.println(Thread.currentThread().getName() + " " + released + "'dan çýkýþ yapiyor ");
            objects.notify();
            return objects.add(released);
        }
    }
}

public class MainforObjectPool implements Runnable {

    static ObjectPool p = ObjectPool.getObjectpool();

    public static void main(String[] args) {
        MainforObjectPool m = new MainforObjectPool();

        Thread t1 = new Thread(m, "kamyon 1");
        Thread t2 = new Thread(m, "kamyon 2");
        Thread t3 = new Thread(m, "kamyon 3");
        Thread t4 = new Thread(m, "kamyon 4");
        Thread t5 = new Thread(m, "kamyon 5");

        t1.start();
        t2.start();
        t3.start();
        t4.start();
        t5.start();

        System.out.println("Kamyon Garaj Yönetim Sistemi:");

    }

    public void run() {
        Object locked = p.getObject();
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {

            e.printStackTrace();
        }

        p.release(locked);
    }
}
